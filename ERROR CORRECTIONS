Error Helper for (possible) common problems that took a while:

Cross On Output Matrix:
    Intensity Array has extreme intensities at horizontal and vertical
        Do round(resolution)
            - ...self.resolution = round(star1.resolution * self.diameter / star1.diameter)


Checkered Board Pattern:
    Intensity Array is reading the incorrect value from the star IA
        Only test for the transformation (reading from star1 IA) and skip creating the true atmosphere IA
        Changed how final void IA is calculated
            - ...for i in range(m.ceil(EP1offseti-EP1.resolution/2),m.ceil(EP1offseti+EP1.resolution/2)):
            - ...black.intensity_array[i,j] = black.intensity_array[i,j] + EP1DC.intensity_array[i-EP1DCoffseti,j-EP1DCoffsetj]


Fade On Star from Planet/Atmosphere:
    Misalligned assignment of IA to specific Planet/Atmosphere Intensity Array
        Do abs(i) & abs(j) rather than i & j within the reassignment
            - ...self.intensity_array[i,j] = star1.intensity_array[abs(i) + self.position[0] - star1.position[0],abs(j) + self.position[1] - star1.position[1]]


NAN in Intensity Array:
    Viewing angle is outside of debris cloud, therefore line does not intersect
        Change angle to include {changed resolution * diameter / total resolution} 
            - ...angularDegree = angularDiameterDegree((abs(((self.resolution/2-abs(i))**2+(self.resolution/2-abs(j))**2))**(1/2))*self.outerDiameter/self.resolution, self.distance)
    Viewing angle is equal to zero (???)
        Change angle from zero to close to zero
            - ...if round(angle,4) == 0: angle = 0.000009
    Square Root of a Negative Number
        Change square roots to include abs()
            - ...abs((distance*u.lyr+(distance**2*(u.lyr**2)-(1+m.tan(m.radians(angle))**2)
                    *(distance**2*(u.lyr**2)-radius**2*(u.km**2)))**(1/2)))
    Circles and NANs if statement
        If output is not NAN, and within circle bounds, continue with calculations
            - ...if (m.isnan(angularDegree) == False) & ((abs(((self.resolution/2-abs(i))**2+(self.resolution/2-abs(j))**2))**(1/2)) <= self.resolution/2):

Incorrect Chord/Intensity Calculation
    Angle calculation was incorrect
        Check calculation when i, j = 0. See if 0 diameter is observed. Place m.sqrt(2) in
            - ...angularDegree = angularDiameterDegree((m.sqrt(((self.resolution/2-abs(i))**2+(self.resolution/2-abs(j))**2))*self.outerDiameter*m.sqrt(2)/self.resolution), self.distance)
    Intensity Calculation was incorrect
        Never allow EP1DC IA to be above star1 IA or negative
            - ...self.intensity_array[i,j] = (1-self.absorption)**(chordLength/(outerHeight-innerHeight))*star1.intensity_array[m.ceil(i-self.position[0]),m.ceil(j-self.position[1])]

Incorrect Ellipse Size/Angle, Albedo/Reflection on Exoplanet
    Start with equation for an ellipse including angle and simplify with knowns
        (((x-h)cos(A) + (y-k)sin(A))^2)/a^2 + (((x-h)sin(A) - (y-k)cos(A))^2)/b^2 = 1
            where h & k are positional adjustments, a & b adjust the width and height of the ellipse, and A is angle from the x-axis
            - ...(((i*m.cos(self.positionAngle)+j*m.sin(self.positionAngle))**2/self.a1Constant+(i*m.sin(self.positionAngle)-j*m.cos(self.positionAngle))**2/self.b0Constant) > self.resolution/4)):
